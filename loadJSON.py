# a script to load a scraped JSON of fireplumes into the "plumes" 
# database. The JSON should take the following format 
# *** JSON format ***
# There is one large JSON generated by parse_summary.py named dump.json 
# {
#     plumes : [
#         {plumeobj1},
#         {plumeobj2}, 
#         .
#         .
#         .
#         {plumeobjn}
#     ]
# }

# Each plume is uniqeuly identified within this json file by an id field, this corresponds to the
# "region name" in the raw text file for each plume. This is a combination of the orbit path and block 

# Each plume identifier is associated with another JSON object that represents a single fire 
# plume. Each plume that makes it through the filters will be represented by such a "plumeobj" 
# the structure of the plumeobj file is meant to be a streamlined and more workable form of the
# ASCII files that natively represent fire plumes 

# references 
# https://www-misr.jpl.nasa.gov/getData/accessData/MisrMinxPlumes2/rawDataDoc/
# https://www-misr.jpl.nasa.gov/getData/accessData/MisrMinxPlumes2/productLabeling/ --> region and biome codes in here

# *** plumeobj JSON format ***
# Per fire plume 
# { 
#     "id" : string, --> unique identifier 
#     "url" : string, --> used to get individual plume data per pixel if necessary 
#     "date" : array[int] ([year,month,day]), 
#     "time" : array[int] ([hour,minute,second]), --> UTC time 
#     "num_hts" : int, --> the number of heights measured in this plume (km^2 resolution) also number of rows in raw data file 
#     "long" : float, --> starting longitude 
#     "lat" : float, --> starting latitude 
#     "region" : (string,int), --> string is layman name int is region code number
#     "biome" : (string,int), --> string is layman name int is biome code number 
#     "perimeter" : int, --> (km)
#     "length" : int, --> the max distance of a measured plume from the source (longest stretch from source to plume)
#     "area" : int, --> (km)
#     "terr_mean_ht" : float, 
#     "terr_max_ht" : int, 
#     "terr_min_ht" : int, 
#     "fire_ht" : int, --> (m > MSL) height of source fire over Mean sea level (meters)
#     "avg_plume_ht" : int, --> plume calculated average height relative to fire (algorithmic) (smoothed) (meters)
#     "plume_med_ht" : int, --> plume calculated median height relative to fire (algorithmic) (smoothed) (meters)
#     "plume_max_ht" : int, --> plume calculated max height relative to fire (empirical) (meters)
#     "plume_min_ht" : int, --> plume calculated min height relative to fire (empirical) (meters)
#     "plume_dev_ht" : int, --> plume std deviation height (algorithmic) (smoothed) (meters)
#     "plume_local_var_ht" : int, --> plume local variance in height (algorithmic) (smoothed) (meters)
#     "plume_dir" : int, --> averaged azimimuthal orientation, degrees clockwise from north 
#     "plume_dir_vec" : [(long,lat)...] --> a vector of longitude and latituide coordinates defining the digitized direction of the plume
#     "wind_dir_diff" : int, (deg) difference in degrees of wind dir to along dir 
#     "avg_opt_depth" : array[float], --> the average optical depth [red,blue,green,IR]
#     "avg_ss_albedo" : array[float], --> the average single scattering albedo [red,blue,green,IR]
#     "total_frp" : int, 
#     "max_frp" : int, 
#     "avg_frp" : float, 
#     "max_angstrom" : float, --> the max angstrom exponent 
#     "avg_angstrom" : float, --> the average angstrom exponent 
#     "num_fire_pts" : int, --> number of points that have fire radiative power measurement
#     "cloud" : bool, 
# }
import sys 
import os 
import json 
import django 
import datetime 
import pytz 
import time 

from django.db import models
from plumes.models import Plume, Region, Biome

print('Attempting to load json /Users/jboone/Documents/MISR/search/dump.json')

jsonPath = '/Users/jboone/Documents/MISR/search/dump.json'

# check to make sure that the json file actually exists
if (not os.path.isfile(jsonPath)) : 
    print('The JSON file does not exist')
    sys.exit(1)

# counter to give each plume
count = 0

bounds = [100000,-100000]

start_time = time.time()

with open(jsonPath) as jsonfile : 
    json = json.load(jsonfile)

    print('--file loaded as dictionary in %s--' % (time.time() - start_time))
    for plume in json['plumes'] :

        plume_exists = Plume.objects.filter(p_name=plume['id']).exists()

        if (plume_exists) : 
            plume_item = Plume.objects.filter(p_name=plume['id'])
            # print(plume_item)

            continue 
        else : 
            # print(plume['url'])

            time_instance = datetime.datetime(int(plume['date'][0]), 
                int(plume['date'][1]), 
                int(plume['date'][2]),
                int(plume['time'][0]), 
                int(plume['time'][1]), 
                int(plume['time'][2]), 
                tzinfo=pytz.UTC)

            reg = Region.objects.get(region_ID = plume['region'][1]) 
            # print(plume['biome'])
            bi = Biome.objects.get(biome_ID = plume['biome'][1])

            # generate the plume object 
            p = Plume( p_name = plume['id'], p_url = plume['url'], p_date = time_instance)
            
            # add the num hts
            p.p_num_hts = plume['num_hts']
            p.p_src_long = plume['long']
            p.p_src_lat = plume['lat']

            p.p_long_rng = plume['long_rng'] 
            p.p_lat_rng = plume['lat_rng']

            p.p_region = reg
            p.p_biome = bi

            p.p_perimeter = plume['perimeter']
            p.p_length = plume['length']
            p.p_area = plume['area']

            p.p_terr_mean_ht = plume['terr_mean_ht']
            # print(plume['terr_max_ht'])
            p.p_terr_max_ht = plume['terr_max_ht']
            # print(plume['terr_min_ht'])
            p.p_terr_min_ht = plume['terr_min_ht']

            # print(plume['fire_ht'])
            p.p_fire_ht = plume['fire_ht']

            # print('med ht',plume['plume_med_ht'])
            if (plume['plume_med_ht'] == '') : 
                p.p_med_ht = None
            else : 
                p.p_med_ht = plume['plume_med_ht']


            # print('max_ht',plume['plume_max_ht'])
            if (plume['plume_max_ht'] == '') : 
                p.p_max_ht = None 
            else : 
                p.p_max_ht = plume['plume_max_ht'] 


            # print('min_ht',plume['plume_min_ht'])
            if (plume['plume_min_ht'] == '') :
                p_p_min_ht = None 
            else : 
                p.p_min_ht = plume['plume_min_ht'] 

            # print('dev_ht',plume['plume_dev_ht'])
            if (plume['plume_dev_ht'] == '') : 
                p.p_dev_ht = None
            else : 
                p.p_dev_ht = plume['plume_dev_ht']

            # print(plume['plume_local_var_ht'])
            if (plume['plume_local_var_ht'] == '') : 
                p.p_local_var_ht = None
            else : 
                p.p_local_var_ht = plume['plume_local_var_ht']


            if (plume['plume_dir'] == '') : 
                p.p_local_var_ht = None
            else : 
                p.p_local_var_ht = plume['plume_dir']

            p.p_dir_vec = plume['plume_dir_vec']

            if (plume['wind_dir_diff'] == -99) : 
                print('addddddd')

            if (plume['wind_dir_diff'] == '') : 
                p.p_wind_dir_diff = None
            else : 
                p.p_wind_dir_diff = plume['wind_dir_diff']

            if (plume['avg_ss_albedo'][0] == -1) : 
                p.p_avg_ss_albedo = None
            else : 
                p.p_avg_ss_albedo = plume['avg_ss_albedo']
            
            if (plume['avg_opt_depth'][0] == -1) : 
                p.p_avg_opt_depth = None 
            else : 
                p.p_avg_opt_depth = plume['avg_opt_depth']

            p.p_num_fire_pts = plume['num_fire_pts']


            if (plume['total_frp'] == '') :
                p.p_total_frp = None 
            else :
                p.p_total_frp = plume['total_frp']

            if (plume['max_frp'] == '') : 
                p.p_max_frp = None 
            else : 
                p.p_max_frp = plume['max_frp']

            if (plume['avg_frp'] == '') : 
                p.p_avg_frp = None 
            else : 
                p.p_avg_frp = plume['avg_frp']

            if (plume['max_angstrom'] == '') : 
                p.max_angstrom = None 
            else :
                p.p_max_angstrom = plume['max_angstrom']

            if (plume['avg_angstrom'] == '') : 
                p.p_avg_angstrom = None
            else : 
                p.p_avg_angstrom = plume['avg_angstrom']

            p.p_clouds = plume['cloud']
 
            p.save()
    
    print('--file uploaded to database in %s--' % (time.time() - start_time))
    # # print('bounded from ',bounds[0],' to ',bounds[1])

if __name__ == '__main__' : 
    print('you called scrape!')

# data validation functions 
